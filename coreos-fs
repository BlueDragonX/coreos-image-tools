#!/bin/bash
# Mount/Unmount a CoreOS image.

TOOLS="$(cd "$(dirname "$0")"; pwd)"

err() {
	echo "$@" >&2
}

die() {
	err "error:" "$@"
	exit 1
}

usage() {
	test -n "$1" && err "error:" "$@"
	err "usage: $0 command [options]"
	err "Mount and unmount CoreOS partitions."
	err ""
	err "Valid commands:"
	err "    mount [-l label] {device|image} dir     Mount a filesystem."
	err "    umount [-l label] {device|image}        Unmount a filesystem."
	exit 1
}

parse_options() {
	COMMAND=$1; shift
	LABEL=
	IMAGE=
	DIR=

	while getopts "l:" OPTION; do
		case "$OPTION" in
		l)
			LABEL="$OPTARG"
			;;
		esac
	done
	shift $(($OPTIND - 1))

	case "$COMMAND" in
	mount)
		DEVICE=$1
		DIR=$2
		shift 2
		test -e "$DEVICE" || die "invalid device or image: '$DEVICE'"
		test -d "$DIR" || die "invalid mount point: '$DEVICE'"
		;;
	umount)
		DEVICE=$1
		test -e "$DEVICE" || die "invalid device or image: '$DEVICE'"
		shift
		;;
	*)
		die "invalid command"
		;;
	esac
}

device_is_image() {
	# Check if a device is an image file.
	test -f "$1"
}

device_is_root() {
	# Check if a device is a root device.
	echo "$1" | egrep -q '^/dev/(((s|x?v)d[a-z])|(loop[0-9]))$'
}

device_is_loop() {
	# Check if a device is a loop device.
	echo "$1" | egrep -q '^/dev/((loop[0-9])|(mapper/loop[0-9]p[0-9]+))$'
}

device_find() {
	# usage: device_find DEVICE LABEL
	# Find a partition by its label.
	blkid -o device -t LABEL="$2" | egrep "$(lo_part_prefix "$1")"
}

device_label() {
	# usage: device_label DEVICE
	# Find a label by partition device.
	blkid -o export "$1" | egrep '^LABEL=' | sed -e 's/^LABEL=//g'
}

lo_find() {
	# usage: lo_find IMAGE
	# Print the loop device the image is attached to.
	losetup -j "$1" | sed -e 's/:.*//'
}

lo_part_prefix() {
	# usage: lo_part_prefix DEVICE
	# Print the partition prefix for the loop device.
	echo "$1" | sed -r -e 's|^/dev/loop([0-9]+)|/dev/mapper/loop\1p|'
}

lo_resolve() {
	if device_is_image "$DEVICE"; then
		IMAGE=$DEVICE
		DEVICE=$(lo_find "$IMAGE")
		test -b "$DEVICE" || return 1
	fi
	return 0
}

lo_create() {
	# Create loop devices.
	if device_is_image "$DEVICE"; then
		IMAGE=$DEVICE
		kpartx -a "$IMAGE" || return 1
		DEVICE=$(lo_find "$IMAGE")
	elif device_is_root "$DEVICE" && device_is_loop "$DEVICE"; then
		kpartx -a "$DEVICE" || return 1
	fi
	return 0
}

lo_destroy() {
	# Clean up loop devices.
	if [ -n "$IMAGE" ]; then
		local out=$(kpartx -d "$IMAGE" 2>&1)
		if [ $? -eq 0 ]; then
			echo $out
			return $?
		fi
	fi
}

is_coreos_ro() {
	# usage: is_coreos_ro LABEL
	# Check if a partition is supposed to be read-only.
	echo "$1" | egrep -q '^(USR)|(ROOT)-[AB]$'
}

is_coreos_root() {
	# usage: is_coreos_root LABEL
	# Check if a partition is a CoreOS root partition.
	echo "$1" | egrep -q '^ROOT$'
}

image_mount_part() {
	# usage: image_mount_part device dir [label]
	# Mount a single partition.
	local device=$1
	local dir=$2
	local label=$3
	if [ -n "$label" ]; then
		local root=$device
		device="$(device_find "$root" "$label")"
		test -b "$device" || die "unable to find '$label' on '$root'"
	else
		label="$(device_label "$device")"
		test -n "$label" || die "unabel to find label for '$device'"
	fi
	if is_coreos_ro "$label"; then
		"$TOOLS/coreos-rw" enable "$device" || die "failed to enable read/write on '$device'"
	fi
	if is_coreos_root "$label"; then
		mount -o subvol=root "$device" "$dir" || die "failed to mount '$device' at '$dir'"
	else
		mount "$device" "$dir" || die "failed to mount '$device' at '$dir'"
	fi
}

image_mount_tree() {
	# usage: image_mount_tree device dir
	# Mount an entire tree.
	local device=$1
	local dir=$2
	test -d "$DIR" || die "mount point does not exist"
	image_mount_part "$device" "$DIR" ROOT
	image_mount_part "$device" "$DIR/usr" USR-A
	image_mount_part "$device" "$DIR/usr/share/oem" OEM
}

image_mount() {
	lo_create
	if device_is_root "$DEVICE"; then
		image_mount_tree "$DEVICE" "$DIR"
	else
		image_mount_part "$DEVICE" "$DIR" "$LABEL"
	fi
}

image_umount_part() {
	# usage: image_umount_part device [label]
	local device=$1
	local label=$2
	if [ -n "$label" ]; then
		device="$(device_find "$DEVICE" "$label")"
	else
		label="$(device_label "$device")"
	fi
	if ! [ -b "$device" ]; then
		err "device not found for label '$label'"
		return 1
	fi
	umount "$device" || return 1
	if is_coreos_ro "$label"; then
		"$TOOLS/coreos-rw" disable "$device" || return 1
	fi
}

image_umount_tree() {
	# usage: image_umount_tree device
	image_umount_part "$device" OEM
	image_umount_part "$device" USR-A
	image_umount_part "$device" ROOT
}

image_umount() {
	lo_resolve || die "image is not attached to a loop device"

	if device_is_root "$DEVICE"; then
		image_umount_tree "$DEVICE"
	else
		image_umount_part "$DEVICE" "$LABEL"
	fi

	lo_destroy || die "failed to detach loop devices"
}

parse_options "$@"

test "$(whoami)" == "root" || die "this tool must be run as root"
which blkid &> /dev/null || die "blkid not found in PATH"
which kpartx &> /dev/null || die "kpartx not found in PATH"
which losetup &> /dev/null || die "losetup not found in PATH"
which mount &> /dev/null || die "mount not found in PATH"

case "$COMMAND" in
mount)
	image_mount
	;;
umount)
	image_umount
	;;
esac
