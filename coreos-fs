#!/bin/bash
# Mount/Unmount a CoreOS image.

TOOLS="$(cd "$(dirname "$0")"; pwd)"

err() {
	echo "$@" >&2
}

die() {
	err "error:" "$@"
	exit 1
}

usage() {
	test -n "$1" && err "error:" "$@"
	err "usage: $0 COMMAND [OPTIONS]"
	err "Mount/Unmount CoreOS partitions."
	err ""
	err "Valid commands:"
	err "    mount IMAGE LABEL MNT   Mount the image partition LABEL at MNT."
	err "    umount IMAGE LABEL      Unmount the image mounted at MNT."
	exit 1
}

lo_find() {
	# usage: lo_find IMAGE
	# Print the loop device the image is attached to.
	losetup -j "$1" | sed -e 's/:.*//'
}

lo_part_prefix() {
	# usage: lo_part_prefix DEVICE
	# Print the aPrtition prefix for the loop device.
	echo "$1" | sed -r -e 's|^/dev/loop([0-9]+)|/dev/mapper/loop\1p|'
}

blk_find_label() {
	# usage: blk_find_label DEVICE LABEL
	# Find a partition by its label.
	blkid | egrep "^$(lo_part_prefix "$1")[0-9]+:.* LABEL=\"${2}\"" | \
		sed 's/:.*//g'
}

is_readonly() {
	# usage: is_readonly LABEL
	# Check if a partition is supposed to be read-only.
	echo "$1" | egrep -q '^(USR)|(ROOT)-[AB]$'
}

image_mount() {
	# usage: mount IMAGE LABEL MNT
	# Mount a CoreOS image.
	local image="$1"
	local label="$2"
	local mnt="$3"

	# check mnt directory
	test -d "$mnt" || die "mount point does not exist"

	# attach loop device
	local lo="$(lo_find "$image")"
	if [ -z "$lo" ]; then
		losetup -f "$image" || die "failed to attach loop device to '$image'"
		lo=$(lo_find "$image")
	fi

	# add loop partitions
	if ! kpartx -a "$lo"; then
		losetup -d "$lo"
		die "failed to create loop partitions"
	fi

	# find labeled partition
	local part="$(blk_find_label "$lo" "$label")"
	if [ -z "$part" ]; then
		kpartx -d "$lo"
		losetup -d "$lo"
		die "could not find partition '$label'"
	fi

	# make root writable
	if is_readonly "$label"; then
		if ! "$TOOLS/coreos-rw" enable "$part"; then
			kpartx -d "$lo"
			losetup -d "$lo"
			die "failed to make '$part' writable"
		fi
	fi

	# mount partition
	if ! mount "$part" "$mnt"; then
		kpartx -d "$lo"
		losetup -d "$lo"
		die "failed to mount '$part' at '$mnt'"
	fi
}

image_umount() {
	# usage: umount IMAGE LABEL
	# Unmount a CoreOS image.
	local image="$1"
	local label="$2"

	# find loop device image is attached to
	local lo="$(lo_find "$image")"
	test -n "$lo" || die "image not attached to a loop device"

	# find partition by label
	local part="$(blk_find_label "$lo" "$label")"

	# unmount partition
	if [ -n "$part" ]; then
		if mount | egrep -q "^${part} "; then
			umount "$part" || die "failed to unmount '$part'"
		else
			err "partition not mounted"
		fi
	else
		test -n "$part" || err "could not find partition '$label'"
	fi

	# make root partition read-only
	if is_root "$label"; then
		"$TOOLS/coreos-rw" disable "$part" || \
			die "failed to make '$part' writable"
	fi

	# clean up loop devices
	local prefix="$(lo_part_prefix "$lo")"
	if ! mount | egrep -q "^${prefix}[0-9]+ "; then
		kpartx -d "$lo"
		losetup -d "$lo"
	fi
}

test "$(whoami)" == "root" || die "this tool must be run as root"
which blkid &> /dev/null || die "blkid not found in PATH"
which kpartx &> /dev/null || die "kpartx not found in PATH"
which losetup &> /dev/null || die "losetup not found in PATH"
which mount &> /dev/null || die "mount not found in PATH"
test $# -ge 1 || usage "invalid arguments"
cmd="$1"; shift

case "$cmd" in
mount)
	test $# -eq 3 || usage "invalid arguments"
	image_mount "$@"
	;;
umount)
	test $# -eq 2 || usage "invalid arguments"
	image_umount "$@"
	;;
*)
	usage "unknown command: '$cmd'"
	;;
esac
